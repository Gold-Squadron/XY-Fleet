<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>backend</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>3.18.7</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <!-- These may not be required, unless you use the GenerationTool manually for code generation -->
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-meta</artifactId>
            <version>3.18.7</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-codegen</artifactId>
            <version>3.18.7</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <!-- Use org.jooq                for the Open Source Edition
                         org.jooq.pro            for commercial editions with Java 17 support,
                         org.jooq.pro-java-11    for commercial editions with Java 11 support,
                         org.jooq.pro-java-8     for commercial editions with Java 8 support,
                         org.jooq.trial          for the free trial edition with Java 17 support,
                         org.jooq.trial-java-11  for the free trial edition with Java 11 support,
                         org.jooq.trial-java-8   for the free trial edition with Java 8 support

                     Note: Only the Open Source Edition is hosted on Maven Central.
                           Install the others locally using the provided scripts, or access them from here: https://repo.jooq.org -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>3.18.7</version>

                <executions>
                    <execution>
                        <id>jooq-codegen</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!-- Configure the database connection here -->
                    <jdbc>
                        <driver>org.mariadb.jdbc.Driver</driver>
                        <url>jdbc:mariadb://localhost:3312</url>
                        <user>root</user>
                        <password></password>

                        <!-- You can also pass user/password and other JDBC properties in the optional properties tag: -->
                        <!--<properties>
                            <property><key>user</key><value>[db-user]</value></property>
                            <property><key>password</key><value>[db-password]</value></property>
                        </properties>-->
                    </jdbc>

                    <generator>
                        <database>
                            <!-- The database dialect from jooq-mea. Available dialects are
                                 named org.jooq.meta.[database].[database]Database.

                                 Natively supported values are:

                                     org.jooq.meta.ase.ASEDatabase
                                     org.jooq.meta.auroramysql.AuroraMySQLDatabase
                                     org.jooq.meta.aurorapostgres.AuroraPostgresDatabase
                                     org.jooq.meta.cockroachdb.CockroachDBDatabase
                                     org.jooq.meta.db2.DB2Database
                                     org.jooq.meta.derby.DerbyDatabase
                                     org.jooq.meta.firebird.FirebirdDatabase
                                     org.jooq.meta.h2.H2Database
                                     org.jooq.meta.hana.HANADatabase
                                     org.jooq.meta.hsqldb.HSQLDBDatabase
                                     org.jooq.meta.ignite.IgniteDatabase
                                     org.jooq.meta.informix.InformixDatabase
                                     org.jooq.meta.ingres.IngresDatabase

                                     org.jooq.meta.mysql.MySQLDatabase
                                     org.jooq.meta.oracle.OracleDatabase
                                     org.jooq.meta.postgres.PostgresDatabase
                                     org.jooq.meta.redshift.RedshiftDatabase
                                     org.jooq.meta.snowflake.SnowflakeDatabase
                                     org.jooq.meta.sqldatawarehouse.SQLDataWarehouseDatabase
                                     org.jooq.meta.sqlite.SQLiteDatabase
                                     org.jooq.meta.sqlserver.SQLServerDatabase
                                     org.jooq.meta.sybase.SybaseDatabase
                                     org.jooq.meta.teradata.TeradataDatabase
                                     org.jooq.meta.vertica.VerticaDatabase

                                 This value can be used to reverse-engineer generic JDBC DatabaseMetaData (e.g. for MS Access)

                                     org.jooq.meta.jdbc.JDBCDatabase

                                 This value can be used to reverse-engineer standard jOOQ-meta XML formats

                                     org.jooq.meta.xml.XMLDatabase

                                 This value can be used to reverse-engineer schemas defined by SQL files
                                 (requires jooq-meta-extensions dependency)

                                     org.jooq.meta.extensions.ddl.DDLDatabase

                                 This value can be used to reverse-engineer schemas defined by JPA annotated entities
                                 (requires jooq-meta-extensions-hibernate dependency)

                                     org.jooq.meta.extensions.jpa.JPADatabase

                                 This value can be used to reverse-engineer schemas defined by Liquibase migration files
                                 (requires jooq-meta-extensions-liquibase dependency)

                                     org.jooq.meta.extensions.liquibase.LiquibaseDatabase

                                 You can also provide your own org.jooq.meta.Database implementation
                                 here, if your database is currently not supported -->
                            <name>org.jooq.meta.mariadb.MariaDBDatabase</name>

                            <!-- All elements that are generated from your schema (A Java regular expression.
                                 Use the pipe to separate several expressions) Watch out for
                                 case-sensitivity. Depending on your database, this might be
                                 important!

                                 You can create case-insensitive regular expressions using this syntax: (?i:expr)

                                 Whitespace is ignored and comments are possible.
                                 -->
                            <includes>.*</includes>

                            <!-- All elements that are excluded from your schema (A Java regular expression.
                                 Use the pipe to separate several expressions). Excludes match before
                                 includes, i.e. excludes have a higher priority -->
                            <excludes>
                                <!--UNUSED_TABLE                # This table (unqualified name) should not be generated
                                | PREFIX_.*                   # Objects with a given prefix should not be generated
                                | SECRET_SCHEMA\.SECRET_TABLE # This table (qualified name) should not be generated
                                | SECRET_ROUTINE              # This routine (unqualified name) ... -->
                            </excludes>

                            <!-- The schema that is used locally as a source for meta information.
                                 This could be your development schema or the production schema, etc
                                 This cannot be combined with the schemata element.

                                 If left empty, jOOQ will generate all available schemata. See the
                                 manual's next section to learn how to generate several schemata -->
                            <inputSchema>SWT</inputSchema>
                        </database>

                        <!-- Generation flags: See advanced configuration properties -->
                        <generate/>

                        <target>
                            <!-- The destination package of your generated classes (within the
                                 destination directory)

                                 jOOQ may append the schema name to this package if generating multiple schemas,
                                 e.g. org.jooq.your.packagename.schema1
                                      org.jooq.your.packagename.schema2 -->
                            <packageName>org.jooq.SWT</packageName>

                            <!-- The destination directory of your generated classes -->
                            <directory>~/jooqGeneratedClasses</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>