/*
 * This file is generated by jOOQ.
 */
package org.jooq.SWT;


import org.jooq.ForeignKey;
import org.jooq.SWT.tables.AccessGroups;
import org.jooq.SWT.tables.Bookings;
import org.jooq.SWT.tables.GasCards;
import org.jooq.SWT.tables.Insurances;
import org.jooq.SWT.tables.Pricing;
import org.jooq.SWT.tables.Users;
import org.jooq.SWT.tables.Vehicles;
import org.jooq.SWT.tables.records.AccessGroupsRecord;
import org.jooq.SWT.tables.records.BookingsRecord;
import org.jooq.SWT.tables.records.GasCardsRecord;
import org.jooq.SWT.tables.records.InsurancesRecord;
import org.jooq.SWT.tables.records.PricingRecord;
import org.jooq.SWT.tables.records.UsersRecord;
import org.jooq.SWT.tables.records.VehiclesRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in SWT.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccessGroupsRecord> KEY_ACCESS_GROUPS_PRIMARY = Internal.createUniqueKey(AccessGroups.ACCESS_GROUPS, DSL.name("KEY_access_groups_PRIMARY"), new TableField[] { AccessGroups.ACCESS_GROUPS.ID }, true);
    public static final UniqueKey<BookingsRecord> KEY_BOOKINGS_PRIMARY = Internal.createUniqueKey(Bookings.BOOKINGS, DSL.name("KEY_bookings_PRIMARY"), new TableField[] { Bookings.BOOKINGS.ID }, true);
    public static final UniqueKey<GasCardsRecord> KEY_GAS_CARDS_PRIMARY = Internal.createUniqueKey(GasCards.GAS_CARDS, DSL.name("KEY_gas_cards_PRIMARY"), new TableField[] { GasCards.GAS_CARDS.ID }, true);
    public static final UniqueKey<InsurancesRecord> KEY_INSURANCES_PRIMARY = Internal.createUniqueKey(Insurances.INSURANCES, DSL.name("KEY_insurances_PRIMARY"), new TableField[] { Insurances.INSURANCES.ID }, true);
    public static final UniqueKey<PricingRecord> KEY_PRICING_PRIMARY = Internal.createUniqueKey(Pricing.PRICING, DSL.name("KEY_pricing_PRIMARY"), new TableField[] { Pricing.PRICING.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<VehiclesRecord> KEY_VEHICLES_PRIMARY = Internal.createUniqueKey(Vehicles.VEHICLES, DSL.name("KEY_vehicles_PRIMARY"), new TableField[] { Vehicles.VEHICLES.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccessGroupsRecord, UsersRecord> ACCESS_GROUPS_USER_FK = Internal.createForeignKey(AccessGroups.ACCESS_GROUPS, DSL.name("access_groups_user_fk"), new TableField[] { AccessGroups.ACCESS_GROUPS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<BookingsRecord, UsersRecord> BOOKINGS_DRIVER_FK = Internal.createForeignKey(Bookings.BOOKINGS, DSL.name("bookings_driver_fk"), new TableField[] { Bookings.BOOKINGS.DRIVER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<BookingsRecord, VehiclesRecord> BOOKINGS_VEHICLE_FK = Internal.createForeignKey(Bookings.BOOKINGS, DSL.name("bookings_vehicle_fk"), new TableField[] { Bookings.BOOKINGS.VEHICLE_ID }, Keys.KEY_VEHICLES_PRIMARY, new TableField[] { Vehicles.VEHICLES.ID }, true);
    public static final ForeignKey<GasCardsRecord, VehiclesRecord> GAS_CARDS_VEHICLE_FK = Internal.createForeignKey(GasCards.GAS_CARDS, DSL.name("gas_cards_vehicle_fk"), new TableField[] { GasCards.GAS_CARDS.VEHICLE_ID }, Keys.KEY_VEHICLES_PRIMARY, new TableField[] { Vehicles.VEHICLES.ID }, true);
    public static final ForeignKey<VehiclesRecord, InsurancesRecord> VEHICLES_INSURANCE_FK = Internal.createForeignKey(Vehicles.VEHICLES, DSL.name("vehicles_insurance_fk"), new TableField[] { Vehicles.VEHICLES.INSURANCE_ID }, Keys.KEY_INSURANCES_PRIMARY, new TableField[] { Insurances.INSURANCES.ID }, true);
    public static final ForeignKey<VehiclesRecord, PricingRecord> VEHICLES_PRICING_FK = Internal.createForeignKey(Vehicles.VEHICLES, DSL.name("vehicles_pricing_fk"), new TableField[] { Vehicles.VEHICLES.PRICING_ID }, Keys.KEY_PRICING_PRIMARY, new TableField[] { Pricing.PRICING.ID }, true);
}
